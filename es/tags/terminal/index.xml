<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>terminal on charly3pins.dev</title>
    <link>https://charly3pins.dev/es/tags/terminal/</link>
    <description>Recent content in terminal on charly3pins.dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 10 Mar 2020</lastBuildDate><atom:link href="https://charly3pins.dev/es/tags/terminal/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Mensajes de commit personalizados de Git</title>
      <link>https://charly3pins.dev/es/blog/mensajes-de-commit-personalizados-de-git/</link>
      <pubDate>Tue, 10 Mar 2020</pubDate>
      
      <guid>https://charly3pins.dev/es/blog/mensajes-de-commit-personalizados-de-git/</guid>
      <description>Genere mensajes de commit personalizados para su repositorio y estandarice su registro de commits.</description>
      <content>&lt;p&gt;He estado usando la herramienta &lt;a href=&#34;https://github.com/walmartdigital/commit-message-formatter&#34;&gt;CMF&lt;/a&gt; durante el último año y creo que su simplicidad es su potencial. Básicamente es una herramienta de terminal desarrollada en Go por &lt;a href=&#34;https://github.com/walmartdigital&#34;&gt;Walmart Digital&lt;/a&gt; que te ayuda a estandarizar el log de commits de tus proyectos.&lt;/p&gt;
&lt;p&gt;Lo he estado usando durante el último año y medio aproximadamente y todo lo que puedo decir es muy útil. Acordamos con el equipo la configuración que queremos utilizar y definimos un conjunto de cambios que aplica en nuestro caso. También elegimos el &lt;a href=&#34;https://github.com/walmartdigital/commit-message-formatter#jira-flow&#34;&gt;Jira flow&lt;/a&gt; y cambiamos los valores para el &lt;code&gt;cambio&lt;/code&gt; agregando un emojis para hacer las confirmaciones un poco más divertidas para comprobarlos en el registro.&lt;/p&gt;
&lt;p&gt;Puede instalarlo a través de npm:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span class=&#34;nx&#34;&gt;npm&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;install&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;g&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;go&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cmf&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;o desde Go:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span class=&#34;nx&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;install&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;github&lt;/span&gt;.&lt;span class=&#34;nx&#34;&gt;com&lt;/span&gt;&lt;span class=&#34;sr&#34;&gt;/walmartdigital/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;commit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;formatter&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Después de eso, abra una terminal y navegue hasta la raíz del proyecto que desea usar. Luego escriba:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span class=&#34;nx&#34;&gt;cmf&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;init&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Deberá seleccionar uno de los flujos y creará un archivo &lt;code&gt;.cmf.yaml&lt;/code&gt; con la plantilla del seleccionado. Puede editar ese archivo de la forma que desee. La condición única es que cualquier variable que desee utilizar debe definirse mediante &lt;code&gt;{{}}&lt;/code&gt;. Ejemplo: &lt;code&gt;{{CHANGE}}&lt;/code&gt; le preguntará el &amp;ldquo;CAMBIO&amp;rdquo; que hizo y mostrará las opciones que definió en la plantilla.&lt;/p&gt;
&lt;p&gt;Aquí está el archivo &lt;code&gt;.cmf.yaml&lt;/code&gt; que estoy usando en este sitio:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PROMPT:
    - KEY: &amp;quot;CHANGE&amp;quot;
      LABEL: &amp;quot;Type of change&amp;quot;
      OPTIONS:
        - VALUE: &amp;quot;feat :sparkles:&amp;quot;
          DESC: &amp;quot;A new feature&amp;quot;
        - VALUE: &amp;quot;fix :bug:&amp;quot;
          DESC: &amp;quot;A bug fix&amp;quot;
        - VALUE: &amp;quot;test :rotating_light:&amp;quot;
          DESC: &amp;quot;Adding missing tests or correcting wrong ones&amp;quot;
        - VALUE: &amp;quot;style :lipstick:&amp;quot;
          DESC: &amp;quot;A code change to improve clean code&amp;quot;
        - VALUE: &amp;quot;build-ci :construction_worker_man:&amp;quot;
          DESC: &amp;quot;Changes that affect the build system and/or CI configuration files and scripts&amp;quot;
        - VALUE: &amp;quot;refactor :hammer:&amp;quot;
          DESC: &amp;quot;A code change&amp;quot;
        - VALUE: &amp;quot;docs :books:&amp;quot;
          DESC: &amp;quot;Documentation only changes&amp;quot;
        - VALUE: &amp;quot;chore :card_index:&amp;quot;
          DESC: &amp;quot;Changes that don&#39;t fit any of the options above&amp;quot;
    - KEY: &amp;quot;MESSAGE&amp;quot;
      LABEL: &amp;quot;Commit message&amp;quot;
TEMPLATE: &amp;quot;{{CHANGE}}: {{MESSAGE}}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;</content>
    </item>
    
  </channel>
</rss>